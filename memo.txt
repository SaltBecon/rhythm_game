元データ:小節/拍/ノーツ
{
    data:{},
    notes:[
        [
            [[0(タップ), 始点(段), 始点(列), 終点(段), 終点(列)]],
            [[1(始　点), 始点(段), 始点(列), 終点(段), 終点(列), ID]],
            [[2(終　点), ID]]
        ]
    ]
}

勝手なキーコード:
    qwertyuiop@[ : 0,0~0,11
    asdfghjkl;:] : 1,0~1,11
    zxcvbnm,./\ : 2,0~2,10

元データからつくるもの:
ノーツが存在するかどうか[false, false, false...]
ノーツリスト[タイミング(ミリ秒), [対応するキー], 種類, 色(0:赤, 1:緑, 2:青, 3:黄, 4:水, 5:紫, 6:白), 判定開始時間, 判定終了時間, (ロングID)]
ロングノーツリスト[ロングID, ID,  開始タイミング(ms(始点+ミス判定)), 終了タイミング(ms), [対応するキー]]
キーごとのノーツリスト[ID, ID, ...]
フレームごとの表示するノーツ[ID, 種類(0:線, 1:四角fill, 2:四角stroke), 座標(始x), 座標(始y), 座標(終x), 座標(終y), 色, 線の太さ]
キーを押す => キーごとのノーツリストの先頭のやつを判定する
=>該当ノーツの対応キーのリストからIDを消す=>ノーツの存在をfalseにする
判定:(Miss, Bad, Good, Perfect)1,2:"縦連判定(CHUNITHM丸パクリ)" <- 簡略化 普通に削る
    前半:
        0.MGP:なし
        1. GP:判定開始時間
        2.  P:判定拡大時間, 初期判定範囲
        全部2番でいい
        0.[判定時間 - 最低判定, [なし]]
        1.[判定時間 - 前ノーツとの差 / 2, [なし]]
        2.[判定時間 - 前ノーツとの差 / 2, [諸々]]
    後半:
        0.PGM:なし
        1.PG :判定終了時間
        2.P  :判定縮小時間, 後期判定範囲
    

ロングノーツ:
始点:コンボ加算されないタップノーツ
中間:つくる(終了したら始点の判定に基づいて加点)



やることリスト
縦連判定
ロングノーツ判定
譜面表示
ゲーム中の処理（判定, コンボ加算, スコア加算等）
（タイトル画面, 選曲画面, リザルト画面）<=文化祭の時でいい